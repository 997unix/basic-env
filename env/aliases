alias ll='ls -lart'
alias l.='ldot'
#
alias dir='ls -lart|grep ^d'
alias pa='. $HOME/basic_env/env/aliases'
alias ps1='eval "export PS1=\"\`uname -n\`:\${LOGNAME}> \""'
alias c='tput clear'
alias n='nslookup'
alias cut='pcut'

# set shell vars for last 10 foo temp  files
# allows the idiom: it; echo bar > $f; it ; echo baz > $f; f_list; diff $f $f1
# which seems like a long way around
function f_list () {
    eval $(
        i=''
        fcount=10
        (( tail_count = fcount + 1 ))

        for i in `ls -rt1 /home/thansmann/tmp/foo/foo*|tail -${tail_count}`
          do
          [ $fcount == 0   ] && fcount=''
          echo "export f${fcount}=$(dirname $i)/$(basename $i)"
          (( fcount = fcount - 1 ))
          done
    )
}

rs () {
eval `resize`
}

# one of my many functions does a source on my profile and make life
# easy
function sp {
. ~/.profile
}

# one of my many functions does a source on my profile and make life
# easy
vp () {
vi ~/.profile
}

function le () {
less $*
}

function les () {
less $*
}

function lessn () {
less -N $*
}


function ldot {
ls -al $1|perl -n -e 'if ( /^-/ ) {split;if (@_[-1] =~ /^\..*$/) {print "@_[-1] \n";}}'
}

function d {
banner `date +%m/%d`
}


cpan () {
echo "Starting the interactive CPAN shell"
perl -MCPAN -e shell;
}


## funky su. idea stolen from leo.
_su ()
{
      OS=`uname -s`
      echo "in case you want to come back ($OS):"
      pwd

      if  [ -f ~/.sudo_box  ]
      then
	SU="sudo su - root -c \"exec /usr/bin/env bash --login -ao emacs\""
      else
	SU="su - root -c \"exec /usr/bin/env bash --login -ao emacs\""
      fi

	# dumb backward thing
      if [ ! `type bash 2>&1 > /dev/null` ]
      then
	eval $SU
      else
	(
	LOGNAME=root
	USER=root
	su - root -c "exec /usr/bin/ksh -ao emacs"
	)
      fi
}

function pse {
	ps -ef|egrep -i $1|grep -v grep
}

function pst {
	ps -ef|grep $LOGIN|grep -v grep
}


function lart {
	ls -lart $*
	 }

function ll {
lart $*
}


_id () {
 echo "id is:"
 echo "	`id`"
 echo "machine is:"
 echo "	`uname -a`"
}

_magic_cd () {
cd $1
pwd
}

function b {
_magic_cd ~/bin
}

function ss {
_magic_cd ~/src
}

function p {
_magic_cd ~/src/perlmod
}

function pd {
echo "starting perl in debug mode, lib ~/bin and ~/perl/lib are included"
perl  -I$HOME/bin -I$HOME/perl/lib -de 34
}

function x {
echo $*
}

function r {
	eval `resize`
}

function sps {
 PS1="> "
}



# find out what time it is when you only have seconds since 1970
sec2date () {
    eval date -d \'1970-01-01 + $1 sec\' +\"%Y-%m-%d %T %z\"
}


# find UTC when you have PDT
function pdt2utc () {
	date -u -d "$* PDT"
}


function ul {
        cd /usr/local
        pwd
        }

function uls {
        cd /usr/local/src
        pwd
        }

function ulj {
        cd /usr/local/java
        pwd
        }

function ulb {
        cd /usr/local/bin
        pwd
        }

function ull {
        cd /usr/local/lib
        pwd
        }

function ule {
        cd /usr/local/etc
        pwd
        }

function pushenv () {
    cd && scp -r .screenrc .profile .bashrc env $1:
    ssh $i "chmod 755 .profile; ln -sf .profile .bash_profile"
    cd -
}

function pushssh () {
    cd
    scp  -r .ssh $1:
    cd -
}

function path () {
    type -p $1
}

function llp () {
    __PATH=`type -p $1`
    if [ ! -z $__PATH ]
        then
        ls -arlt $__PATH
    else
        echo "can't find a path for $1"
    fi

}

function d () {
    pushd .
    echo pushed `pwd` onto the stack
}

function p () {
    popd
    echo popped to `pwd`
}


function lsn () {
	netstat -lnp
}

function sane () {
	stty sane
}


function _ps () {
# this the most useful ps i've ever seen
#  ps -eo pid,user,group,args --sort user
    ps -efww f

}

function hold () {
    for i in $*
    do
    echo cp\'ing file [ $i ] to [ ${i}.hold ]
    cp $i ${i}.hold
    done
}

function lcd () {
	FILE=`locate $1|egrep "${1}$"|head -1`
	echo "geussing where you want go where $FILE lives"
	cd `dirname $FILE`
	echo -ne "YOU MAY BE AT THE WRONG STOP - you are at: "
	pwd
}

function trail () {
    tail -f $1
}





# generate some activity so sshd don't time us out
# 'hp' stands for "Hold Portal" as in the d&d spell.
function hp () {
while :; do echo -n . ; sleep 300 ;done

}


# here's an easy way to this stuff. without arg - give today , with arg give the date.
function datex () {

if [ -z "$*" ]
then
        date -u   "+'%Y-%m-%d %R:%S'"
else
        date -u  -d "$*"  "+'%Y-%m-%d %R:%S'"
fi
}


####### Sun Oct 21 13:53:09 PDT 2007
function list_functions () {
    set | egrep "^* ()$" | egrep '()' | egrep -v '\$|{|^$'
}

if [ -f ~/env/auto_functions ]
    then
    source ~/env/auto_functions
fi


# less the youngest file in the dir that is ont a dot file..
function lless () {
    less `ls -Art1|tail -1`
}

function et () {
    vi `current_file_named foo`
    cur_file=`current_file_named foo`
    export f=$cur_file
    f_list
}


##############################
##########
# Wed Sep 26 13:47:25 2007
# got tired of making up tmp file names.
# get a tmpfile with your userid in it so there's no collisions
# theres a cleanvt fuction to so you can clear them easily.
# after you run this the '$f' var has the file you just edited for easy
# recall - i wrote for this idiom:
# vi a tmp file, paste some junk, then "grep foo $f"
function vt () {
      FILE=`next_file_named foo`
          f=$FILE
          vi $f
          f_list
          echo $f
}


function it () {
      FILE=`next_file_named foo`
          f=$FILE
          touch $f
          f_list
          echo $f
}



##############################
##########
# Wed Sep 26 14:04:45 2007
# clean up after the 'vt' function.
function cleanf () {
if [ -z $1 ]
    then
    TMP_CATAGORY=foo
    else
    TMP_CATAGORY=$1
fi
  FOODIR=$(dirname `next_file_named $TMP_CATAGORY`)
  if [ -d "$FOODIR" -a ! -z $FOODIR  ]
      then
      echo clearing $FOODIR
      rm -Iv $FOODIR/$TMP_CATAGORY-*
  else
      echo "Dir $FOODIR does not exist"
      return
  fi

echo
}

function all-e (){
    echo ej - existing jsh log file - exports j={current jsh file} to the env
    echo vj - vi existing jsh log file
    echo et - existing temp file - prints it and exports f=={current foo tmp file} to the env
    echo vt - vi a NEW foo temp file -  exports f=={current foo tmp file} to the env
    echo cleanvt - deletes files from foo tmp dir
    echo cleanj - deletes files from jsh tmp dir
    echo f_list - sets env var for last 10 'foo-nnn' temp file $f, $f1 ... $f10
    echo j_list - sets env var for last 10 'jsh-nnn' temp file $j, $j1 ... $j10

}

function j_list () {
eval $(
    i=''
    jcount=9

    for i in `ls -rt1 /home/thansmann/tmp/jsh/jsh*|tail -10`
      do
      [ $jcount == 0   ] && jcount=''
      echo "export j${jcount}=$(dirname $i)/$(basename $i)"
      (( jcount = jcount - 1 ))
      done
   )
}


function f_list () {
    eval $(
        i=''
        fcount=9

        for i in `ls -rt1 /home/thansmann/tmp/foo/foo*|tail -10`
          do
          [ $fcount == 0   ] && fcount=''
          echo "export f${fcount}=$(dirname $i)/$(basename $i)"
          (( fcount = fcount - 1 ))
          done
    )
}
